{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/roast-student-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview An AI flow to generate a humorous roast for a student.\n *\n * - roastStudent - A function that generates a roast based on student profile data.\n * - RoastStudentInput - The input type for the roastStudent function.\n * - RoastStudentOutput - The return type for the roastStudent function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'zod';\nimport type { Student } from '@/types';\n\n// We only need a subset of the student data for the roast.\nconst RoastStudentInputSchema = z.object({\n  name: z.string(),\n  nickname: z.string().optional(),\n  best_level: z.string(),\n  worst_level: z.string(),\n  favourite_lecturer: z.string(),\n  relationship_status: z.string(),\n  alternative_career: z.string(),\n  best_experience: z.string(),\n  worst_experience: z.string(),\n  will_miss: z.string(),\n});\nexport type RoastStudentInput = z.infer<typeof RoastStudentInputSchema>;\n\nconst RoastStudentOutputSchema = z.object({\n  roast: z.string().describe('A short, witty, and humorous roast of the student. It should be light-hearted and funny, not mean-spirited. Should be 1-3 sentences.'),\n});\nexport type RoastStudentOutput = z.infer<typeof RoastStudentOutputSchema>;\n\nexport async function roastStudent(input: Student): Promise<RoastStudentOutput> {\n  // Map the full Student object to the schema the flow expects\n  const flowInput: RoastStudentInput = {\n    name: input.name,\n    nickname: input.nickname,\n    best_level: input.best_level,\n    worst_level: input.worst_level,\n    favourite_lecturer: input.favourite_lecturer,\n    relationship_status: input.relationship_status,\n    alternative_career: input.alternative_career,\n    best_experience: input.best_experience,\n    worst_experience: input.worst_experience,\n    will_miss: input.will_miss,\n  };\n  return roastStudentFlow(flowInput);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'roastStudentPrompt',\n  input: { schema: RoastStudentInputSchema },\n  output: { schema: RoastStudentOutputSchema },\n  prompt: `You are a witty AI comedian known for your clever and light-hearted roasts. Your task is to roast a student based on their profile. The roast should be funny and clever, but not genuinely mean or insulting. It's for a fun yearbook-style feature.\n\nKeep the roast to 1-3 sentences.\n\nHere is the student's profile:\n- Name: {{{name}}}\n- Nickname: {{{nickname}}}\n- Best Level: {{{best_level}}}\n- Worst Level: {{{worst_level}}}\n- Favourite Lecturer: {{{favourite_lecturer}}}\n- Relationship Status: {{{relationship_status}}}\n- If not Computing, they'd be a: {{{alternative_career}}}\n- Best Experience: {{{best_experience}}}\n- Worst Experience: {{{worst_experience}}}\n- Will miss: {{{will_miss}}}\n\nGenerate a roast based on these details. Focus on the most interesting or contradictory parts. For example, if their best level was their final year, you could joke about them finally figuring things out. If their alternative career is very different from computing, that's a good target.\n`,\n});\n\nconst roastStudentFlow = ai.defineFlow(\n  {\n    name: 'roastStudentFlow',\n    inputSchema: RoastStudentInputSchema,\n    outputSchema: RoastStudentOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;;;;;;AAGA,2DAA2D;AAC3D,MAAM,0BAA0B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM;IACd,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM;IACpB,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM;IACrB,oBAAoB,oIAAA,CAAA,IAAC,CAAC,MAAM;IAC5B,qBAAqB,oIAAA,CAAA,IAAC,CAAC,MAAM;IAC7B,oBAAoB,oIAAA,CAAA,IAAC,CAAC,MAAM;IAC5B,iBAAiB,oIAAA,CAAA,IAAC,CAAC,MAAM;IACzB,kBAAkB,oIAAA,CAAA,IAAC,CAAC,MAAM;IAC1B,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM;AACrB;AAGA,MAAM,2BAA2B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC7B;AAGO,eAAe,aAAa,KAAc;IAC/C,6DAA6D;IAC7D,MAAM,YAA+B;QACnC,MAAM,MAAM,IAAI;QAChB,UAAU,MAAM,QAAQ;QACxB,YAAY,MAAM,UAAU;QAC5B,aAAa,MAAM,WAAW;QAC9B,oBAAoB,MAAM,kBAAkB;QAC5C,qBAAqB,MAAM,mBAAmB;QAC9C,oBAAoB,MAAM,kBAAkB;QAC5C,iBAAiB,MAAM,eAAe;QACtC,kBAAkB,MAAM,gBAAgB;QACxC,WAAW,MAAM,SAAS;IAC5B;IACA,OAAO,iBAAiB;AAC1B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ;IAAwB;IACzC,QAAQ;QAAE,QAAQ;IAAyB;IAC3C,QAAQ,CAAC;;;;;;;;;;;;;;;;;AAiBX,CAAC;AACD;AAEA,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACpC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,OAAO;AACT;;;IAlDoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/fyb-students/%5Bid%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {roastStudent as '403a27d6489c4eac0e65f76a01cac3879a75f82887'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 384, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/fyb-students/%5Bid%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/fyb-students/[id]/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/fyb-students/[id]/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsS,GACnU,oEACA","debugId":null}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/fyb-students/%5Bid%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/fyb-students/[id]/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/fyb-students/[id]/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkR,GAC/S,gDACA","debugId":null}},
    {"offset": {"line": 412, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}